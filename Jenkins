@Library('Shared@main') _
pipeline {
    agent any

    environment {
        SONAR_HOME = tool "Sonar"
    }

    parameters {
        string(name: 'FRONTEND_DOCKER_TAG', defaultValue: '', description: 'Docker tag for frontend image')
        string(name: 'BACKEND_DOCKER_TAG', defaultValue: '', description: 'Docker tag for backend image')
    }

    stages {
        stage("Validate Parameters") {
            steps {
                script {
                    if (params.FRONTEND_DOCKER_TAG.trim() == '' || params.BACKEND_DOCKER_TAG.trim() == '') {
                        error("Both FRONTEND_DOCKER_TAG and BACKEND_DOCKER_TAG are required to proceed.")
                    }
                }
            }
        }

        stage("Workspace Clean") {
            steps {
                cleanWs()
            }
        }

        stage("Git: Code Checkout") {
            steps {
                script {
                    code_checkout("https://github.com/p-k-pavan/wanderlust.git", "main")
                }
            }
        }

        stage("Trivy: Filesystem Scan") {
            steps {
                script {
                    trivy_scan()
                }
            }
        }

        stage("OWASP: Dependency Check") {
            steps {
                script {
                    owasp_dependency()
                }
            }
        }

        stage("SonarQube: Code Analysis") {
            steps {
                script {
                    sonarqube_analysis("Sonar", "Wanderlust", "Wanderlust")
                }
            }
        }

        stage("SonarQube: Quality Gate") {
            steps {
                script {
                    Sonarqube_quality_check()
                }
            }
        }

        stage("Frontend: Env Setup") {
            steps {
                script {
                    dir("Automations") {
                        withAWS(region: 'ap-south-1', credentials: 'aws-credentials') {
                            sh "bash updatefrontendnew.sh"
                        }
                    }
                }
            }
        }

        stage("Docker: Build Images") {
            steps {
                script {
                    dir('backend') {
                        docker_build("wanderlust-backend", "${params.BACKEND_DOCKER_TAG}", "pkpavan14")
                    }

                    dir('frontend') {
                        docker_build("wanderlust-frontend", "${params.FRONTEND_DOCKER_TAG}", "pkpavan14")
                    }
                }
            }
        }

        stage("Docker: Push to DockerHub") {
            steps {
                script {
                    docker_push("wanderlust-backend", "${params.BACKEND_DOCKER_TAG}", "pkpavan14")
                    docker_push("wanderlust-frontend", "${params.FRONTEND_DOCKER_TAG}", "pkpavan14")
                }
            }
        }
    }

    post {
        success {
            archiveArtifacts artifacts: '*.xml', followSymlinks: false
            build job: "Wanderlust-CD", parameters: [
                string(name: 'FRONTEND_DOCKER_TAG', value: "${params.FRONTEND_DOCKER_TAG}"),
                string(name: 'BACKEND_DOCKER_TAG', value: "${params.BACKEND_DOCKER_TAG}")
            ]
        }
    }
}
